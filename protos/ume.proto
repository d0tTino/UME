syntax = "proto3";
package ume;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "events.proto";

message CypherQuery {
  string cypher = 1;
}

message CypherResult {
  repeated google.protobuf.Struct records = 1;
}

// Individual record for streaming Cypher results
message CypherRecord {
  google.protobuf.Struct record = 1;
}

message VectorSearchRequest {
  repeated float vector = 1;
  int32 k = 2;
}

message VectorSearchResponse {
  repeated string ids = 1;
}

message Node {
  string id = 1;
  google.protobuf.Struct attributes = 2;
}

message RecallRequest {
  string query = 1;
  repeated float vector = 2;
  int32 k = 3;
}

message RecallResponse {
  repeated Node nodes = 1;
}

message AuditRequest {
  int32 limit = 1;
}

message AuditEntry {
  int64 timestamp = 1;
  string user_id = 2;
  string reason = 3;
  string signature = 4;
}

message AuditResponse {
  repeated AuditEntry entries = 1;
}

message PublishEventRequest {
  EventEnvelope envelope = 1;
}

service UME {
  rpc RunCypher(CypherQuery) returns (CypherResult);
  // Server streaming variant of RunCypher
  rpc StreamCypher(CypherQuery) returns (stream CypherRecord);
  rpc SearchVectors(VectorSearchRequest) returns (VectorSearchResponse);
  rpc Recall(RecallRequest) returns (RecallResponse);
  rpc GetAuditEntries(AuditRequest) returns (AuditResponse);
  rpc PublishEvent(PublishEventRequest) returns (google.protobuf.Empty);
}

message Task {
  string id = 1;
  string payload = 2;
}

message TaskResult {
  string agent_id = 1;
  string task_id = 2;
  double score = 3;
}

message PlanRequest {
  string objective = 1;
}

message PlanResponse {
  repeated Task tasks = 1;
}

service AgentOrchestrator {
  rpc Plan(PlanRequest) returns (PlanResponse);
  rpc ExecuteTask(Task) returns (TaskResult);
}
