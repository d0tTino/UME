name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-lint:
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Check out code
        uses: actions/checkout@v4 # Updated to v4

      - name: Fetch main
        run: git fetch origin main --depth=1

      - name: Detect code changes
        id: changes
        run: |
          scripts/ci_should_run.py && echo "run=true" >> "$GITHUB_OUTPUT" || echo "run=false" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5 # Updated to v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false --local
          # Disables creation of a new virtual environment by Poetry within the project directory for CI
          # --local flag makes this configuration specific to the current project

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry install --no-interaction --no-ansi --with dev
          # --with dev ensures dev dependencies like pytest and ruff are installed

      - name: Install type stubs for mypy
        if: steps.changes.outputs.run == 'true'
        run: |
          pip install types-PyYAML types-pytz types-requests types-ujson

      - name: Run unit tests (pytest)
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry run pytest --maxfail=1 --disable-warnings -q tests/

      - name: Check coverage (pytest-cov)
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry run pytest --cov=src/ume --cov-report=xml --cov-report=term-missing tests/
          # Generates term-missing report for console and xml for potential external tools

      - name: Lint with Ruff
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry run ruff check src tests

      - name: Check formatting with Ruff
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry run ruff format --check src tests

      - name: Static type check with mypy
        if: steps.changes.outputs.run == 'true'
        run: |
          poetry run mypy
