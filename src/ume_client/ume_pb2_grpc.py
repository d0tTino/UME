# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ume_pb2 as ume__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ume_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UMEStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunCypher = channel.unary_unary(
                '/ume.UME/RunCypher',
                request_serializer=ume__pb2.CypherQuery.SerializeToString,
                response_deserializer=ume__pb2.CypherResult.FromString,
                _registered_method=True)
        self.StreamCypher = channel.unary_stream(
                '/ume.UME/StreamCypher',
                request_serializer=ume__pb2.CypherQuery.SerializeToString,
                response_deserializer=ume__pb2.CypherRecord.FromString,
                _registered_method=True)
        self.SearchVectors = channel.unary_unary(
                '/ume.UME/SearchVectors',
                request_serializer=ume__pb2.VectorSearchRequest.SerializeToString,
                response_deserializer=ume__pb2.VectorSearchResponse.FromString,
                _registered_method=True)
        self.GetAuditEntries = channel.unary_unary(
                '/ume.UME/GetAuditEntries',
                request_serializer=ume__pb2.AuditRequest.SerializeToString,
                response_deserializer=ume__pb2.AuditResponse.FromString,
                _registered_method=True)


class UMEServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunCypher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCypher(self, request, context):
        """Server streaming variant of RunCypher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UMEServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunCypher': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCypher,
                    request_deserializer=ume__pb2.CypherQuery.FromString,
                    response_serializer=ume__pb2.CypherResult.SerializeToString,
            ),
            'StreamCypher': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCypher,
                    request_deserializer=ume__pb2.CypherQuery.FromString,
                    response_serializer=ume__pb2.CypherRecord.SerializeToString,
            ),
            'SearchVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchVectors,
                    request_deserializer=ume__pb2.VectorSearchRequest.FromString,
                    response_serializer=ume__pb2.VectorSearchResponse.SerializeToString,
            ),
            'GetAuditEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditEntries,
                    request_deserializer=ume__pb2.AuditRequest.FromString,
                    response_serializer=ume__pb2.AuditResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ume.UME', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ume.UME', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UME(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunCypher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ume.UME/RunCypher',
            ume__pb2.CypherQuery.SerializeToString,
            ume__pb2.CypherResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCypher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ume.UME/StreamCypher',
            ume__pb2.CypherQuery.SerializeToString,
            ume__pb2.CypherRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ume.UME/SearchVectors',
            ume__pb2.VectorSearchRequest.SerializeToString,
            ume__pb2.VectorSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAuditEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ume.UME/GetAuditEntries',
            ume__pb2.AuditRequest.SerializeToString,
            ume__pb2.AuditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AgentOrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Plan = channel.unary_unary(
                '/ume.AgentOrchestrator/Plan',
                request_serializer=ume__pb2.PlanRequest.SerializeToString,
                response_deserializer=ume__pb2.PlanResponse.FromString,
                _registered_method=True)
        self.ExecuteTask = channel.unary_unary(
                '/ume.AgentOrchestrator/ExecuteTask',
                request_serializer=ume__pb2.Task.SerializeToString,
                response_deserializer=ume__pb2.TaskResult.FromString,
                _registered_method=True)


class AgentOrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentOrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Plan': grpc.unary_unary_rpc_method_handler(
                    servicer.Plan,
                    request_deserializer=ume__pb2.PlanRequest.FromString,
                    response_serializer=ume__pb2.PlanResponse.SerializeToString,
            ),
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=ume__pb2.Task.FromString,
                    response_serializer=ume__pb2.TaskResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ume.AgentOrchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ume.AgentOrchestrator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentOrchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ume.AgentOrchestrator/Plan',
            ume__pb2.PlanRequest.SerializeToString,
            ume__pb2.PlanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ume.AgentOrchestrator/ExecuteTask',
            ume__pb2.Task.SerializeToString,
            ume__pb2.TaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
